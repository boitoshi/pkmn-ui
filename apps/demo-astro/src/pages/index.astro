---
import TypeBadge from "@pkmn-ui/astro/TypeBadge.astro";
import MsgWindow from "@pkmn-ui/astro/MsgWindow.astro";
import MenuGrid from "@pkmn-ui/astro/MenuGrid.astro";

const menu = [
  {label:"バッグ",active:true},
  {label:"ポケモン"},
  {label:"ずかん"},
  {label:"せってい"}
];

const themes = [
  { id: 'gba', name: 'GBA (Gen3)', description: 'ルビー・サファイア・エメラルド' },
  { id: 'ds-dot', name: 'DS DOT (Gen4-5)', description: 'ダイパ・プラチナ・HGSS・BW・BW2' },
  { id: 'lgpe', name: 'LGPE (Gen7)', description: 'Let\'s Go ピカチュウ・イーブイ' },
  { id: 'swsh', name: 'SWSH (Gen8)', description: 'ソード・シールド' }
];
---
<html lang="ja">
<head>
  <meta charset="utf-8" />
  <title>PKMN-UI デモ - テーマ切り替え</title>
  <link rel="stylesheet" href="/pkmn-ui/packages/themes/gba/index.css" id="theme-css">
</head>
<body style="padding:24px">
  <div class="demo-container">
    <header class="demo-header panel" style="margin-bottom:24px; padding:16px;">
      <h1 style="margin:0 0 16px 0; font-size:24px;">🎮 PKMN-UI テーマデモ</h1>
      
      <div class="theme-selector">
        <label style="font-weight:700; margin-right:12px;">テーマ選択:</label>
        <select id="theme-select" class="theme-dropdown" style="padding:4px 8px; border-radius:4px;">
          {themes.map(theme => (
            <option value={theme.id} selected={theme.id === 'gba'}>
              {theme.name} - {theme.description}
            </option>
          ))}
        </select>
        
        <a href="/pkmn-ui/vue/" class="framework-switch-btn" style="margin-left:16px;">
          🔄 Vue版で見る
        </a>
      </div>
    </header>

    <div class="demo-content">
      <section style="margin-bottom:24px;">
        <h2 style="margin-bottom:12px;">TypeBadge - ポケモンタイプバッジ</h2>
        <div style="display:flex; gap:8px; flex-wrap:wrap;">
          <TypeBadge type="fire" />
          <TypeBadge type="water" />
          <TypeBadge type="grass" />
          <TypeBadge type="electric" />
        </div>
      </section>

      <section style="margin-bottom:24px;">  
        <h2 style="margin-bottom:12px;">MsgWindow - メッセージウィンドウ</h2>
        <MsgWindow title="オーキドはかせ">
          <p>ここは　ポケモンUIライブラリの　デモじゃ！</p>
          <p>テーマを　きりかえて　みてくれ！</p>
        </MsgWindow>
      </section>

      <section>
        <h2 style="margin-bottom:12px;">MenuGrid - メニューグリッド</h2>
        <MenuGrid items={menu}/>
      </section>
    </div>
  </div>

  <script>
    const themeSelect = document.getElementById('theme-select');
    const themeCss = document.getElementById('theme-css');
    
    const themeMap = {
      'gba': '/pkmn-ui/packages/themes/gba/index.css',
      'ds-dot': '/pkmn-ui/packages/themes/ds/dot/index.css',
      'lgpe': '/pkmn-ui/packages/themes/switch/lgpe/index.css',
      'swsh': '/pkmn-ui/packages/themes/switch/swsh/index.css'
    };

    themeSelect?.addEventListener('change', (e) => {
      const selectedTheme = e.target.value;
      const newCssPath = themeMap[selectedTheme];
      
      if (newCssPath && themeCss) {
        themeCss.href = newCssPath;
        
        // ローカルストレージに保存
        localStorage.setItem('selected-theme', selectedTheme);
      }
    });

    // ページ読み込み時に保存されたテーマを復元
    const savedTheme = localStorage.getItem('selected-theme');
    if (savedTheme && themeMap[savedTheme]) {
      themeSelect.value = savedTheme;
      themeCss.href = themeMap[savedTheme];
    }
  </script>

  <style>
    .demo-container {
      max-width: 800px;
      margin: 0 auto;
    }
    
    .theme-selector {
      display: flex;
      align-items: center;
      gap: 8px;
    }
    
    .theme-dropdown {
      font-family: inherit;
      border: 2px solid var(--ink);
      background: var(--panel-bg);
      color: var(--ink);
    }
    
    h2 {
      font-size: 18px;
      color: var(--ink);
      margin-bottom: 12px;
    }
    
    .framework-switch-btn {
      display: inline-flex;
      align-items: center;
      padding: 4px 12px;
      font-family: inherit;
      font-weight: 700;
      font-size: 14px;
      text-decoration: none;
      border: 2px solid var(--ink);
      border-radius: 4px;
      background: var(--panel-bg);
      color: var(--ink);
      transition: all 0.2s ease;
    }
    
    .framework-switch-btn:hover {
      background: var(--accent);
      color: white;
      transform: translateY(-1px);
    }
  </style>
</body>
</html>
